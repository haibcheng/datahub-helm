# Values to start up datahub after starting up the datahub-prerequisites chart with "prerequisites" release name
# Copy this chart and change configuration as needed.
datahub-gms:
  enabled: true
  replicaCount: 2
  image:
    repository: registry-qa.webex.com/mats/datahub-gms
    tag: 0.9.0.230418
    pullPolicy: Always
    # tag: "v0.9.3 # defaults to .global.datahub.version
  # Optionally set a GMS specific SQL login (defaults to global login)
  # sql:
  #   datasource:
  #     username: "gms-login"
  #     password:
  #       secretRef: gms-secret
  #       secretKey: gms-password
  service:
    type: ClusterIP

  # Set up ingress to expose gms
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: ingress-internal
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: datahub-gms.int.wbx3op-dfwtmp05.dev.infra.webex.com
        paths: [ / ]
    tls:
      - secretName: datahub-gms-int-crt-internal
        hosts:
          - datahub-gms.int.wbx3op-dfwtmp05.dev.infra.webex.com

datahub-frontend:
  enabled: true
  replicaCount: 2
  image:
    repository: registry-qa.webex.com/mats/datahub-frontend
    tag: 0.9.0.230418
    pullPolicy: Always
    # tag: "v0.9.3" # # defaults to .global.datahub.version

  service:
    type: ClusterIP

  # Set up ingress to expose react front-end
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: ingress-internal
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: datahub.int.wbx3op-dfwtmp05.dev.infra.webex.com
        paths: [ / ]
    tls:
      - secretName: datahub-int-crt-internal
        hosts:
          - datahub.int.wbx3op-dfwtmp05.dev.infra.webex.com

acryl-datahub-actions:
  enabled: true
  replicaCount: 2
  image:
    repository: registry-qa.webex.com/mats/datahub-actions
    tag: 0.0.10.230418
    pullPolicy: Always
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 300m
      memory: 256Mi

datahub-mae-consumer:
  image:
    repository: linkedin/datahub-mae-consumer
    # tag: "v0.9.3" # defaults to .global.datahub.version

datahub-mce-consumer:
  image:
    repository: linkedin/datahub-mce-consumer
    # tag: "v0.9.3" # defaults to .global.datahub.version

datahub-ingestion-cron:
  enabled: false
  image:
    repository: acryldata/datahub-ingestion
    # tag: "v0.9.3" # defaults to .global.datahub.version

elasticsearchSetupJob:
  enabled: false
  image:
    repository: registry-qa.webex.com/mats/datahub-elasticsearch-setup
    tag: "0.9.0" # defaults to .global.datahub.version
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 300m
      memory: 256Mi
  podSecurityContext:
    fsGroup: 1000
  securityContext:
    runAsUser: 1000
  podAnnotations: {}

kafkaSetupJob:
  enabled: false
  image:
    repository: registry-qa.webex.com/mats/datahub-kafka-setup
    tag: "0.9.0" # defaults to .global.datahub.version
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 300m
      memory: 768Mi
  podSecurityContext:
    fsGroup: 1000
  securityContext:
    runAsUser: 1000
  podAnnotations: {}

mysqlSetupJob:
  enabled: false
  image:
    repository: acryldata/datahub-mysql-setup
    # tag: "v0.9.3" # defaults to .global.datahub.version
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 300m
      memory: 256Mi
  podSecurityContext:
    fsGroup: 1000
  securityContext:
    runAsUser: 1000
  podAnnotations: {}
  # Optionally set a set-up job specific login (defaults to global login)
  # username: "mysqlSetupJob-login"
  # password:
  #   secretRef: mysqlSetupJob-secret
  #   secretKey: mysqlSetupJob-password

postgresqlSetupJob:
  enabled: false
  image:
    repository: registry-qa.webex.com/mats/datahub-postgres-setup
    tag: "0.9.0"
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 300m
      memory: 256Mi
  podSecurityContext:
    fsGroup: 1000
  securityContext:
    runAsUser: 1000
  podAnnotations: {}
  # Optionally set a set-up job specific login (defaults to global login)
  # username: "postgresqlSetupJob-login"
  # password:
  #   secretRef: postgresqlSetupJob-secrets
  #   secretKey: postgresqlSetupJob-password

datahubUpgrade:
  enabled: false
  image:
    repository: registry-qa.webex.com/mats/datahub-upgrade
    tag: "0.9.0"
  batchSize: 1000
  batchDelayMs: 100
  noCodeDataMigration:
    sqlDbType: "POSTGRES"
    # sqlDbType: "MYSQL"
  podSecurityContext: {}
    # fsGroup: 1000
  securityContext: {}
    # runAsUser: 1000
  podAnnotations: {}
  restoreIndices:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 300m
        memory: 256Mi

global:
  graph_service_impl: elasticsearch
  datahub_analytics_enabled: true
  datahub_standalone_consumers_enabled: false

  ci:
    host: "https://idbrokerbts.webex.com"
    scope: "Identity:SCIM"
    machineAccountName: "CTGWAP-DATAHUB"
    machineAccountPass:
      secretRef: wdh-ci-secrets
      secretKey: machine-account-pass
    bearerTokenOrgId: "6078fba4-49d9-4291-9f7b-80116aab6974"
    accessTokenUser: "C4d7507eca0d56509f82db6919ec550fd1cd76dd67d125fc14e1fe9c2b24d5e10"
    accessTokenPass:
      secretRef: wdh-ci-secrets
      secretKey: access-token-pass

  elasticsearch:
    host: "elasticsearch-master"
    port: "9200"
    skipcheck: "false"
    insecure: "false"
    useSSL: "false"
    indexPrefix: "mats_wdhidx"

  kafka:
    bootstrap:
      server: "local-kafka.kafka:9092"
    ## For AWS MSK set this to a number larger than 1
    # partitions: 3
    # replicationFactor: 3
    schemaregistry:
      url: "http://prerequisites-cp-schema-registry:8081"
      # type: AWS_GLUE
      # glue:
      #   region: us-east-1
      #   registry: datahub
    topic:
      metadataAuditEventName: "DataHubMetadataAuditEvent_v4"
      metadataChangeEventName: "DataHubMetadataChangeEvent_v4"
      failedMetadataChangeEventName: "DataHubFailedMetadataChangeEvent_v4"
      usageEventName: "DataHubUsageEvent_v1"
      metadataChangeLogVersioned: "DataHubMetadataChangeLog_Versioned_v1"
      metadataChangeLogTimeseries: "DataHubMetadataChangeLog_Timeseries_v1"
      metadataChangeProposal: "DataHubMetadataChangeProposal_v1"
      failedMetadataChangeProposal: "DataHubFailedMetadataChangeProposal_v1"
      platformEvent: "DataHubPlatformEvent_v1"

  neo4j:
    host: "prerequisites-neo4j-community:7474"
    uri: "bolt://prerequisites-neo4j-community"
    username: "neo4j"
    password:
      secretRef: neo4j-secrets
      secretKey: neo4j-password

  sql:
    datasource:
      #host: "prerequisites-mysql:3306"
      #hostForMysqlClient: "prerequisites-mysql"
      #port: "3306"
      #url: "jdbc:mysql://prerequisites-mysql:3306/datahub?verifyServerCertificate=false&useSSL=true&useUnicode=yes&characterEncoding=UTF-8&enabledTLSProtocols=TLSv1.2"
      #driver: "com.mysql.cj.jdbc.Driver"
      #username: "root"
      #password:
      #  secretRef: mysql-secrets
      #  secretKey: mysql-root-password
      # --------------OR----------------
      # value: password

      ## Use below for usage of PostgreSQL instead of MySQL
      host: "prerequisites-postgresql:5432"
      hostForpostgresqlClient: "prerequisites-postgresql"
      port: "5432"
      url: "jdbc:postgresql://prerequisites-postgresql:5432/datahub"
      driver: "org.postgresql.Driver"
      username: "postgres"
      password:
        secretRef: wdh-postgresql-secrets
        secretKey: postgres-password
      # --------------OR----------------
      #   value: password

  datahub:
    version: v0.9.5
    gms:
      port: "8080"
      nodePort: "30001"

    monitoring:
      enablePrometheus: false

    mae_consumer:
      port: "9091"
      nodePort: "30002"

    appVersion: "1.0"

    encryptionKey:
      secretRef: "datahub-encryption-secrets"
      secretKey: "encryption_key_secret"
      # Set to false if you'd like to provide your own secret.
      provisionSecret:
        enabled: true
        autoGenerate: true
      # Only specify if autoGenerate set to false
      #  secretValues:
      #    encryptionKey: <encryption key value>

    managed_ingestion:
      enabled: true
      defaultCliVersion: "0.9.5"

    metadata_service_authentication:
      enabled: true
      systemClientId: "__datahub_system"
      systemClientSecret:
        secretRef: "datahub-auth-secrets"
        secretKey: "token_service_signing_key"
      tokenService:
        signingKey:
          secretRef: "datahub-auth-secrets"
          secretKey: "token_service_signing_key"
        salt:
          secretRef: "datahub-auth-secrets"
          secretKey: "token_service_salt"
      # Set to false if you'd like to provide your own auth secrets
      provisionSecrets:
        enabled: true
        autoGenerate: true
      # Only specify if autoGenerate set to false
      #  secretValues:
      #    secret: <secret value>
      #    signingKey: <signing key value>
      #    salt: <salt value>

#  hostAliases:
#    - ip: "192.168.0.104"
#      hostnames:
#        - "broker"
#        - "mysql"
#        - "postgresql"
#        - "elasticsearch"
#        - "neo4j"

## Add below to enable SSL for kafka
#  credentialsAndCertsSecrets:
#    name: datahub-certs
#    path: /mnt/datahub/certs
#    secureEnv:
#      ssl.key.password: datahub.linkedin.com.KeyPass
#      ssl.keystore.password: datahub.linkedin.com.KeyStorePass
#      ssl.truststore.password: datahub.linkedin.com.TrustStorePass
#      kafkastore.ssl.truststore.password: datahub.linkedin.com.TrustStorePass
#
  springKafkaConfigurationOverrides:
#    ssl.keystore.location: /mnt/datahub/certs/datahub.linkedin.com.keystore.jks
#    ssl.truststore.location: /mnt/datahub/certs/datahub.linkedin.com.truststore.jks
#    kafkastore.ssl.truststore.location: /mnt/datahub/certs/datahub.linkedin.com.truststore.jks
    security.protocol: PLAINTEXT
#    kafkastore.security.protocol: SSL
#    ssl.keystore.type: JKS
#    ssl.truststore.type: JKS
#    ssl.protocol: TLS
#    ssl.endpoint.identification.algorithm:
